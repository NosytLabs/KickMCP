name: kick-mcp
version: 1.0.0
description: A secure MCP server for the Kick streaming platform API

# Server configuration
startCommand:
  type: stdio
  configSchema:
    type: object
    required:
      - kickApiKey
      - port
      - rateLimit
    properties:
      kickApiKey:
        type: string
        description: API key for Kick platform authentication
        minLength: 32
        maxLength: 64
      port:
        type: integer
        description: Port number for the server
        minimum: 1024
        maximum: 65535
        default: 3001
      rateLimit:
        type: object
        required:
          - windowMs
          - max
        properties:
          windowMs:
            type: integer
            description: Time window for rate limiting in milliseconds
            minimum: 1000
            default: 900000
          max:
            type: integer
            description: Maximum number of requests per window
            minimum: 1
            default: 100
      logLevel:
        type: string
        description: Logging level
        enum: [debug, info, warn, error]
        default: info
      cache:
        type: object
        properties:
          enabled:
            type: boolean
            default: true
          ttl:
            type: integer
            description: Cache time-to-live in seconds
            minimum: 60
            default: 3600
      websocket:
        type: object
        properties:
          enabled:
            type: boolean
            default: true
          pingInterval:
            type: integer
            description: WebSocket ping interval in milliseconds
            minimum: 1000
            default: 30000
          pingTimeout:
            type: integer
            description: WebSocket ping timeout in milliseconds
            minimum: 1000
            default: 5000
      errorHandling:
        type: object
        properties:
          showStack:
            type: boolean
            default: false
          logErrors:
            type: boolean
            default: true
  commandFunction: |
    (config) => ({
      command: "node",
      args: ["dist/index.js"],
      env: {
        NODE_ENV: "production",
        KICK_API_KEY: config.kickApiKey,
        PORT: config.port,
        RATE_LIMIT_WINDOW_MS: config.rateLimit.windowMs,
        RATE_LIMIT_MAX: config.rateLimit.max,
        LOG_LEVEL: config.logLevel,
        CACHE_ENABLED: config.cache?.enabled,
        CACHE_TTL: config.cache?.ttl,
        WEBSOCKET_ENABLED: config.websocket?.enabled,
        WEBSOCKET_PING_INTERVAL: config.websocket?.pingInterval,
        WEBSOCKET_PING_TIMEOUT: config.websocket?.pingTimeout,
        ERROR_SHOW_STACK: config.errorHandling?.showStack,
        ERROR_LOG_ERRORS: config.errorHandling?.logErrors
      }
    })

# Build configuration
build:
  dockerfile: Dockerfile
  dockerBuildPath: .
  dockerBuildArgs:
    - NODE_ENV=production

# Server metadata
metadata:
  capabilities:
    - chat
    - channels
    - streams
    - users
    - moderation
    - webhooks
    - websocket
  security:
    authentication: required
    rateLimiting: enabled
    caching: enabled
    errorHandling: enabled
  protocols:
    - http
    - websocket
  healthCheck:
    endpoint: /health
    interval: 30s
    timeout: 3s
  logging:
    level: info
    format: json
    transport: console
  initialization:
    method: initialize
    publicAccess: true
    endpoints:
      - path: /tools/list
        public: true
        description: List all available tools without authentication
      - path: /initialize
        public: true
        description: Initialize the server without authentication
  storage:
    type: ephemeral
    note: "Persistent data requires external database"
  websocket:
    reconnect: true
    maxRetries: 5
    backoff: exponential
    sessionAffinity: true
    idleTimeout: 5m 